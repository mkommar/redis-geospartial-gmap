#!/usr/bin/env node

'use strict';

const http = require( 'http' ),
    app = require( '../app' ),
    httpServer = http.createServer( app ),
    logger = require( '../server/logger' ),
    appConfig = require( '../config.json' );

const port = appConfig.env === 'development' ? appConfig.webpack.port : appConfig.app.port,
    host = appConfig.env === 'development' ? appConfig.webpack.host : appConfig.app.host;

app.set( 'port', port );
app.set( 'host', host );

httpServer.listen( port, host );
httpServer.on( 'error', onError );
httpServer.on( 'listening', onListening );
httpServer.on( 'close', onClose );

function onError( error ) {
    if( error.syscall !== 'listen' )
    {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch( error.code )
    {
        case 'EACCES':
            logger.error( bind + ' requires elevated privileges' );
            process.exit( 1 );
            break;
        case 'EADDRINUSE':
            logger.error( bind + ' is already in use' );
            process.exit( 1 );
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = httpServer.address();
    logger.info( 'Listening on ' + addr.address + ':' + addr.port );
}

function onClose() {
    logger.info( 'Server stopped' );
}

process.once( 'SIGINT', function() {
    httpServer.close();
    setTimeout( function() {
        process.exit( 1 );
    }, 1000 );
} );